// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRoleType {
  STUDENT
  EMPLOYEE
  BOTH
}

model User {
  id                 String        @id // From Supabase Auth
  email              String        @unique // From Supabase Auth
  userName           String?       @unique // Display name, can be set during onboarding/settings
  imageUrl           String?       // Profile picture URL
  fullName           String?       // To be collected and made non-null during onboarding
  userPrimaryRole    UserRoleType? // To be collected and made non-null during onboarding

  // Student-specific fields
  nim                String?       @unique // Student ID
  studentMajor       String?       // Student's major
  studentBatch       String?       // Student's batch, stored as "B-YY"

  // Employee-specific fields
  employeeId         String?       @unique // Employee ID
  employeeDepartment String?       // Employee's department

  // Common profile fields
  campusLocations    String[]      @default([]) // E.g., ["@Kemanggisan", "@Alam Sutera"]
  bioDescription     String?       // User's biography
  occupationRole     String[]      @default([]) // E.g., ["Lab Assistant", "Freelance Designer"]
  customLinks        Json          @default("[]") // E.g., [{ "title": "LinkedIn", "url": "..." }]

  profileComplete    Boolean       @default(false) // True after successful onboarding
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // Relations
  createdSubposts Subpost[]
  posts           Post[]
  votes           Vote[]    // Renamed from 'vote' for consistency
  comments        Comment[] // Renamed from 'comment' for consistency
}

model Subpost {
  id          String @id @default(uuid())
  name        String @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User        User? @relation(fields: [userId], references: [id])
  userId      String?

  posts       Post[]
}

model Post {
  id          String @id @default(uuid())
  title       String
  textContent Json?
  imageString String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  netVoteScore Int      @default(0) // Added for sorting by net votes

  vote        Vote[]
  comment     Comment[]

  Subpost     Subpost? @relation(fields: [subName], references: [name])
  subName     String?

  User        User? @relation(fields: [userId], references: [id])
  userId      String?
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  id         String   @id @default(uuid())

  Post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String?

  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  voteType VoteType
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())

  Post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String?

  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

}
